{
  "workflow": {
    "unique_name": "definition_workflow_01UTEZXXYFH4J4LDJd2hdgcH9O9HTlg6Idq",
    "name": "Data Model Updation on SNOW",
    "title": "Data Model Updation on SNOW",
    "type": "generic.workflow",
    "base_type": "workflow",
    "variables": [
      {
        "schema_id": "datatype.string",
        "properties": {
          "value": "",
          "scope": "input",
          "name": "company_account",
          "type": "datatype.string",
          "is_required": true,
          "is_invisible": false
        },
        "unique_name": "variable_workflow_01VD1R2BEW5M077jsGfOWu7HqqvXVm8pHkJ",
        "object_type": "variable_workflow"
      },
      {
        "schema_id": "datatype.integer",
        "properties": {
          "value": 0,
          "scope": "local",
          "name": "looping counter",
          "type": "datatype.integer",
          "is_required": false,
          "is_invisible": false
        },
        "unique_name": "variable_workflow_01UVYPUUWT8IP2SsJlN24XbIqn6vQ9xWzrD",
        "object_type": "variable_workflow"
      }
    ],
    "properties": {
      "atomic": {
        "is_atomic": false
      },
      "delete_workflow_instance": false,
      "display_name": "Data Model Updation on SNOW",
      "runtime_user": {
        "target_default": true
      },
      "target": {
        "execute_on_target_group": true,
        "target_group": {
          "target_group_id": "target_group_01UZL3LNE5VGM1WyXpkk9tpXzRqWbJKYrtt",
          "run_on_all_targets": false,
          "selected_target_types": [
            "web-service.endpoint"
          ],
          "use_criteria": {
            "choose_target_using_algorithm": "choose_first_with_matching_criteria",
            "conditions": [
              {
                "operator": "eqi",
                "left_operand": "$targetgroup.web-service endpoint.input.display_name$",
                "right_operand": "Snow $workflow.definition_workflow_01UTEZXXYFH4J4LDJd2hdgcH9O9HTlg6Idq.input.variable_workflow_01VD1R2BEW5M077jsGfOWu7HqqvXVm8pHkJ$"
              }
            ]
          }
        }
      }
    },
    "object_type": "definition_workflow",
    "actions": [
      {
        "unique_name": "definition_activity_01V08GGEG7J832rf0Qf7mxDRbt64ousq5jm",
        "name": "Group",
        "title": "JWT Token Creation",
        "type": "logic.group",
        "base_type": "activity",
        "properties": {
          "continue_on_failure": false,
          "display_name": "JWT Token Creation",
          "skip_execution": false
        },
        "object_type": "definition_activity",
        "actions": [
          {
            "unique_name": "definition_activity_01UTF0UFLML3I7dhdF9L7Ue8iTGNJJfda17",
            "name": "HTTP Request",
            "title": "Token Request on AMP Visibility Target",
            "type": "web-service.http_request",
            "base_type": "activity",
            "properties": {
              "action_timeout": 30,
              "allow_auto_redirect": true,
              "body": "grant_type=client_credentials",
              "continue_on_error_status_code": false,
              "continue_on_failure": false,
              "custom_headers": [
                {
                  "name": "Content-Type",
                  "value": "application/x-www-form-urlencoded"
                }
              ],
              "display_name": "Token Request on AMP Visibility Target",
              "method": "POST",
              "relative_url": "/oauth2/token",
              "runtime_user": {
                "override_target_runtime_user": true,
                "runtime_user_id": "definition_runtime_user_01NDTZXG9G7M25msWDVbAjcxdTcYKtdvG8b"
              },
              "skip_execution": false,
              "target": {
                "override_workflow_target": true,
                "target_id": "definition_target_01RX4ZJ0H92PS4f0BjXYMjakrJE8ZaVLA85"
              }
            },
            "object_type": "definition_activity"
          },
          {
            "unique_name": "definition_activity_01V07LW3KQV84152WqRK03d5yZLO8w6grs4",
            "name": "JSONPath Query",
            "title": "Set Access Token",
            "type": "corejava.jsonpathquery",
            "base_type": "activity",
            "properties": {
              "action_timeout": 180,
              "continue_on_failure": false,
              "display_name": "Set Access Token",
              "input_json": "$activity.definition_activity_01UTF0UFLML3I7dhdF9L7Ue8iTGNJJfda17.output.response_body$",
              "jsonpath_queries": [
                {
                  "jsonpath_query": "$.access_token",
                  "jsonpath_query_name": "access_token",
                  "jsonpath_query_type": "secure_string"
                }
              ],
              "skip_execution": false
            },
            "object_type": "definition_activity"
          },
          {
            "unique_name": "definition_activity_01UTFKS374QNQ0bwGbBypA5QOUDsAQeMQ7m",
            "name": "HTTP Request",
            "title": "JWT Token Request",
            "type": "web-service.http_request",
            "base_type": "activity",
            "properties": {
              "action_timeout": 30,
              "allow_auto_redirect": true,
              "continue_on_error_status_code": false,
              "continue_on_failure": false,
              "custom_headers": [
                {
                  "name": "Authorization",
                  "value": "Bearer $activity.definition_activity_01V07LW3KQV84152WqRK03d5yZLO8w6grs4.output.jsonpath_queries.access_token$"
                }
              ],
              "display_name": "JWT Token Request",
              "method": "POST",
              "relative_url": "/ao/gen-jwt",
              "runtime_user": {
                "target_default": true
              },
              "skip_execution": false,
              "target": {
                "override_workflow_target": true,
                "target_id": "definition_target_01RX4ZJ0H92PS4f0BjXYMjakrJE8ZaVLA85"
              }
            },
            "object_type": "definition_activity"
          },
          {
            "unique_name": "definition_activity_01V07NS6045YR2iL4WEPiTgpPsBnoanV9vx",
            "name": "Replace String",
            "title": "Remove Quotes",
            "type": "core.replacestring",
            "base_type": "activity",
            "properties": {
              "continue_on_failure": false,
              "display_name": "Remove Quotes",
              "input_string": "$activity.definition_activity_01UTFKS374QNQ0bwGbBypA5QOUDsAQeMQ7m.output.response_body$",
              "replace_list": [
                {
                  "replaced_string": "\"",
                  "replacement_string": ""
                }
              ],
              "skip_execution": false
            },
            "object_type": "definition_activity"
          }
        ]
      },
      {
        "unique_name": "definition_activity_01UV4C8QLBXI72NaQhhUIqIEzGgDXbqVV2q",
        "name": "HTTP Request",
        "title": "Get ALL WF Details",
        "type": "web-service.http_request",
        "base_type": "activity",
        "properties": {
          "action_timeout": 60,
          "allow_auto_redirect": true,
          "content_type": "application/json",
          "continue_on_error_status_code": false,
          "continue_on_failure": false,
          "custom_headers": [
            {
              "name": "Authorization",
              "value": "Bearer $activity.definition_activity_01V07NS6045YR2iL4WEPiTgpPsBnoanV9vx.output.result_string$"
            }
          ],
          "description": "This API needs to be done in order to extract the required WFs IDs.",
          "display_name": "Get ALL WF Details",
          "method": "GET",
          "relative_url": "/be-console/api/v1/workflows/",
          "runtime_user": {
            "target_default": true
          },
          "skip_execution": false,
          "target": {
            "override_workflow_target": true,
            "target_id": "definition_target_01EOZMYH25RSG1rDfjUIjQwHEPioIElydk9"
          }
        },
        "object_type": "definition_activity"
      },
      {
        "unique_name": "definition_activity_01UVY6XHM79GE5MxmxV4KKIjNanSxIngfso",
        "name": "Execute Python Script",
        "title": "WF to its ID mapping",
        "type": "python3.script",
        "base_type": "activity",
        "properties": {
          "action_timeout": 180,
          "continue_on_failure": false,
          "display_name": "WF to its ID mapping",
          "script": "import json\ntrue, false = True, False\nWF_ID_mapping = {}\n\nWF_list = ['Device Unreachable WF']\n\nresponse = $activity.definition_activity_01UV4C8QLBXI72NaQhhUIqIEzGgDXbqVV2q.output.response_body$\n\nprint(f'Total length of list {len(WF_list)}')\n\n\nfor i in response:\n    if i.get('name') in WF_list:\n        WF_ID_mapping[i.get('name')] = i.get('id')\n\nWF_ID_mapping = json.dumps(WF_ID_mapping)\nMapping_length = len(WF_list)\nprint(WF_ID_mapping)",
          "script_queries": [
            {
              "script_query": "WF_ID_mapping",
              "script_query_name": "WF_ID_mapping",
              "script_query_type": "string"
            },
            {
              "script_query": "Mapping_length",
              "script_query_name": "Mapping_length",
              "script_query_type": "integer"
            }
          ],
          "skip_execution": false
        },
        "object_type": "definition_activity"
      },
      {
        "unique_name": "definition_activity_01UVYQ15GK5LE7BJgXbzQc7g5kxtXe8llT0",
        "name": "While Loop",
        "title": "While Loop",
        "type": "logic.while",
        "base_type": "activity",
        "properties": {
          "continue_on_failure": false,
          "display_name": "While Loop",
          "skip_execution": false
        },
        "object_type": "definition_activity",
        "blocks": [
          {
            "unique_name": "definition_activity_01UVYQ16GTB602mCKWhlkyCvsq5KB2U9US5",
            "name": "Condition Branch",
            "title": "While looping counter is less than equal to Mapping length",
            "type": "logic.condition_block",
            "base_type": "activity",
            "properties": {
              "condition": {
                "left_operand": "$workflow.definition_workflow_01UTEZXXYFH4J4LDJd2hdgcH9O9HTlg6Idq.local.variable_workflow_01UVYPUUWT8IP2SsJlN24XbIqn6vQ9xWzrD$",
                "operator": "lt",
                "right_operand": "$activity.definition_activity_01UVY6XHM79GE5MxmxV4KKIjNanSxIngfso.output.script_queries.Mapping_length$"
              },
              "continue_on_failure": false,
              "display_name": "While looping counter is less than equal to Mapping length",
              "skip_execution": false
            },
            "object_type": "definition_activity",
            "actions": [
              {
                "unique_name": "definition_activity_01UVYZX2P9W5D1Tc7khXTBU0hC1ObJVK1Dy",
                "name": "Execute Python Script",
                "title": "Get specific WF ID",
                "type": "python3.script",
                "base_type": "activity",
                "properties": {
                  "action_timeout": 180,
                  "continue_on_failure": false,
                  "display_name": "Get specific WF ID",
                  "script": "WF_ID_mapping = $activity.definition_activity_01UVY6XHM79GE5MxmxV4KKIjNanSxIngfso.output.script_queries.WF_ID_mapping$\n\nWF_list = list(WF_ID_mapping.keys())\n\nWF_name = WF_list[$workflow.definition_workflow_01UTEZXXYFH4J4LDJd2hdgcH9O9HTlg6Idq.local.variable_workflow_01UVYPUUWT8IP2SsJlN24XbIqn6vQ9xWzrD$]\nWF_ID = WF_ID_mapping[WF_name]\nprint(WF_name, WF_ID)",
                  "script_queries": [
                    {
                      "script_query": "WF_name",
                      "script_query_name": "WF_name ",
                      "script_query_type": "string"
                    },
                    {
                      "script_query": "WF_ID",
                      "script_query_name": "WF_ID ",
                      "script_query_type": "string"
                    }
                  ],
                  "skip_execution": false
                },
                "object_type": "definition_activity"
              },
              {
                "unique_name": "definition_activity_01UVYZ62A5JN21t8SfIlRr7vIdmavIaHO9F",
                "name": "HTTP Request",
                "title": "Get specific WF details",
                "type": "web-service.http_request",
                "base_type": "activity",
                "properties": {
                  "action_timeout": 30,
                  "allow_auto_redirect": true,
                  "continue_on_error_status_code": false,
                  "continue_on_failure": false,
                  "custom_headers": [
                    {
                      "name": "Authorization",
                      "value": "Bearer $activity.definition_activity_01V07NS6045YR2iL4WEPiTgpPsBnoanV9vx.output.result_string$"
                    }
                  ],
                  "display_name": "Get specific WF details",
                  "method": "GET",
                  "relative_url": "/be-console/api/v1/workflows/$activity.definition_activity_01UVYZX2P9W5D1Tc7khXTBU0hC1ObJVK1Dy.output.script_queries.WF_ID $",
                  "runtime_user": {
                    "target_default": true
                  },
                  "skip_execution": false,
                  "target": {
                    "override_workflow_target": true,
                    "target_id": "definition_target_01EOZMYH25RSG1rDfjUIjQwHEPioIElydk9"
                  }
                },
                "object_type": "definition_activity"
              },
              {
                "unique_name": "definition_activity_01UYR7GN8FQDH4bag5kvdmBPHv2M2Za0vMw",
                "name": "Execute Python Script",
                "title": "Building Data Model payload for SNOW",
                "type": "python3.script",
                "base_type": "activity",
                "properties": {
                  "action_timeout": 180,
                  "continue_on_failure": false,
                  "display_name": "Building Data Model payload for SNOW",
                  "script": "import json\n\nfalse, true, null = False, True, None\nWF_ID_mapping = $activity.definition_activity_01UVY6XHM79GE5MxmxV4KKIjNanSxIngfso.output.script_queries.WF_ID_mapping$\nWF_Details = $activity.definition_activity_01UVYZ62A5JN21t8SfIlRr7vIdmavIaHO9F.output.response_body$\ntry:\n    wf_id = WF_Details.get('id')\n    for key, value in WF_ID_mapping.items():\n        if value == wf_id:\n            # print(f\" The WF name is : {key} \\n The WF ID is : {wf_id}\")\n            break\n        else:\n            key, value = None, None\n\n    WF_variable_mapping = {\n        \"Device Unreachable WF\":\n                               {\"flow_version\": \"1.0.0\",\n                                \"flow_name\": \"Device Unreachable\",\n                                \"description\": \"Flow for Device Unreachable\",\n                                \"variables\": {\n                                    \"count_chronic_events\": {\n                                        \"display_name\": \"count_chronic_events\",\n                                        \"type\": \"int\",\n                                        \"input_type\": \"dropdown\",\n                                        \"min_length\": \"0\",\n                                        \"max_length\": \"25\",\n                                        \"required\": True,\n                                        \"help_text\": \"Maximum number of Incident for chronic check\"\n                                    },\n                                    \"chronics_time\": {\n                                        \"display_name\": \"chronics_time\",\n                                        \"type\": \"int\",\n                                        \"input_type\": \"dropdown\",\n                                        \"min_length\": \"0\",\n                                        \"max_length\": \"25\",\n                                        \"required\": True,\n                                        \"help_text\": \"Past time duration for chronic check\"\n                                    },\n                                    \"chronics_time_unit\": {\n                                        \"display_name\": \"chronics_time_unit\",\n                                        \"type\": \"string\",\n                                        \"input_type\": \"dropdown\",\n                                        \"choices\": [\"days\", \"hours\", \"minutes\", \"seconds\"],\n                                        \"required\": True,\n                                        \"help_text\": \"Chronic time unit\"\n                                    },\n                                    \"closed_review_timer\": {\n                                        \"display_name\": \"closed_review_timer\",\n                                        \"type\": \"string\",\n                                        \"input_type\": \"text\",\n                                        \"min_length\": \"0\",\n                                        \"max_length\": \"3600\",\n                                        \"required\": True,\n                                        \"help_text\": \"Closed review timer\"\n                                    },\n                                    \"p1_p2_max_check_counter\": {\n                                        \"display_name\": \"p1_p2_max_check_counter\",\n                                        \"type\": \"int\",\n                                        \"input_type\": \"dropdown\",\n                                        \"min_length\": \"0\",\n                                        \"max_length\": \"10\",\n                                        \"required\": True,\n                                        \"help_text\": \"Number of times loop occurs\"\n                                    },\n                                    \"max_check_counter\": {\n                                        \"display_name\": \"max_check_counter\",\n                                        \"type\": \"int\",\n                                        \"input_type\": \"dropdown\",\n                                        \"min_length\": \"0\",\n                                        \"max_length\": \"10\",\n                                        \"required\": True,\n                                        \"help_text\": \"Number of times loop occurs\"\n                                    },\n                                    \"hold_timer_fail_test\": {\n                                        \"display_name\": \"hold_timer_fail_test\",\n                                        \"type\": \"int\",\n                                        \"input_type\": \"dropdown\",\n                                        \"min_length\": \"0\",\n                                        \"max_length\": \"60\",\n                                        \"required\": True,\n                                        \"help_text\": \"Fail test hold timer value\"\n                                    },\n                                    \"hold_timer_fail_test_unit\": {\n                                        \"display_name\": \"hold_timer_fail_test_unit\",\n                                        \"type\": \"string\",\n                                        \"input_type\": \"dropdown\",\n                                        \"choices\": [\"days\", \"hours\", \"minutes\", \"seconds\"],\n                                        \"required\": True,\n                                        \"help_text\": \"Fail test hold timer unit\"\n                                    },\n                                    \"hold_timer_pass_test\": {\n                                        \"display_name\": \"hold_timer_pass_test\",\n                                        \"type\": \"int\",\n                                        \"input_type\": \"dropdown\",\n                                        \"min_length\": \"0\",\n                                        \"max_length\": \"60\",\n                                        \"required\": True,\n                                        \"help_text\": \"Pass test hold timer value\"\n                                    },\n                                    \"hold_timer_pass_test_unit\": {\n                                        \"display_name\": \"hold_timer_pass_test_unit\",\n                                        \"type\": \"string\",\n                                        \"input_type\": \"dropdown\",\n                                        \"choices\": [\"days\", \"hours\", \"minutes\", \"seconds\"],\n                                        \"required\": True,\n                                        \"help_text\": \"Pass test hold timer unit\"\n                                    },\n                                    \"low_pri_device_category_list\": {\n                                        \"display_name\": \"low_pri_device_category_list\",\n                                        \"type\": \"string\",\n                                        \"input_type\": \"text\",\n                                        \"choices\": [\"video.*\"],\n                                        \"required\": True,\n                                        \"help_text\": \"Low priority device category list e.g Please enter comma, separated inputs\"\n                                    }\n                                            }\n                                }\n                           }\n\n    #now we will get list of variables from our mapping\n    if key in list(WF_variable_mapping.keys()):\n        mapped_variables = list(WF_variable_mapping[key]['variables'].keys())\n        # print(f\"The Mapped variables are: {mapped_variables}\")\n\n\n    #now we will get the list of variables from SXO WF\n    variable_list = []\n    for i in WF_Details.get('variables'):\n        variable_list.append(i.get('properties').get('name'))\n    # print(f\"The variable list from SXO WF : {variable_list}\")\n\n    for variable in mapped_variables:\n        if variable in variable_list:\n            validation_flag = True\n        else:\n            validation_flag = False\n    # print(f\"validation_flag: {validation_flag}\\n\")\n\n\n    #Since WF has all the parameters from our mapping, we are proceeding to build payload and send it out to SNOW.\n    snow_payload = []\n\n    #build Data Model\n    data_model = []\n    for i in list(WF_variable_mapping[key]['variables'].items()):\n        # print(i,'\\n')\n        variable_body = {\n            \"name\": i[0]\n        }\n        for j in i[1]:\n            variable_body[j] = i[1][j]\n\n        #get default values for each item\n        for k in WF_Details.get('variables'):\n            if k.get('properties').get('name') == i[0]:\n                variable_body['default'] =  str(k.get('properties').get('value'))\n        # print(variable_body, '\\n')\n        # variable_body = json.dumps(variable_body)\n        data_model.append(variable_body)\n\n    #build the body for payload\n    body  = {\n        \"workflow_version\": WF_variable_mapping[key]['flow_version'],\n        \"workflow_name\": WF_variable_mapping[key]['flow_name'],\n        \"bpmn_flow_url\": \"https://securex-ao.us.security.cisco.com/orch-ui/workflow/$activity.definition_activity_01UVYZX2P9W5D1Tc7khXTBU0hC1ObJVK1Dy.output.script_queries.WF_ID $/\",\n        \"workflow_source\": \"SXO\",\n        \"short_description\": WF_variable_mapping[key]['description'],\n        \"data_model\": data_model,\n        \"workflow_id\": \"$activity.definition_activity_01UVYZX2P9W5D1Tc7khXTBU0hC1ObJVK1Dy.output.script_queries.WF_ID $\"\n             }\n    # body = json.dumps(body)\n    snow_payload.append(body)\n    snow_payload = json.dumps(snow_payload)\n\n    print(snow_payload)\nexcept:\n    import traceback\n    snow_payload = None\n    print(f\" The WF name is : {key} \\n The WF ID is : {wf_id} \\n BYPASSING THIS WF\")\n    traceback.print_exc()",
                  "script_queries": [
                    {
                      "script_query": "snow_payload",
                      "script_query_name": "snow_payload",
                      "script_query_type": "string"
                    }
                  ],
                  "skip_execution": false
                },
                "object_type": "definition_activity"
              },
              {
                "unique_name": "definition_activity_01UYRIG2J6DCP5JhZTYJB0stns439iDi8FN",
                "name": "Condition Block",
                "title": "payload body built?",
                "type": "logic.if_else",
                "base_type": "activity",
                "properties": {
                  "continue_on_failure": false,
                  "display_name": "payload body built?",
                  "skip_execution": false
                },
                "object_type": "definition_activity",
                "blocks": [
                  {
                    "unique_name": "definition_activity_01UYRIG35KL2U18CtVXbabfHc4E0215eJsa",
                    "name": "Condition Branch",
                    "title": "Condition Branch",
                    "type": "logic.condition_block",
                    "base_type": "activity",
                    "properties": {
                      "condition": {
                        "left_operand": "$activity.definition_activity_01UYR7GN8FQDH4bag5kvdmBPHv2M2Za0vMw.output.script_queries.snow_payload$",
                        "operator": "ne",
                        "right_operand": "None"
                      },
                      "continue_on_failure": false,
                      "display_name": "Condition Branch",
                      "skip_execution": false
                    },
                    "object_type": "definition_activity",
                    "actions": [
                      {
                        "unique_name": "definition_activity_01UYREWTL544G0Z0q0K6YKDsOKDHfiW9430",
                        "name": "HTTP Request",
                        "title": "Sending payload to SNOW",
                        "type": "web-service.http_request",
                        "base_type": "activity",
                        "properties": {
                          "action_timeout": 180,
                          "allow_auto_redirect": true,
                          "body": "$activity.definition_activity_01UYR7GN8FQDH4bag5kvdmBPHv2M2Za0vMw.output.script_queries.snow_payload$",
                          "continue_on_error_status_code": false,
                          "continue_on_failure": false,
                          "display_name": "Sending payload to SNOW",
                          "method": "POST",
                          "relative_url": "/x_cims_cms_api_sui/cms/ve/workflow",
                          "runtime_user": {
                            "target_default": true
                          },
                          "skip_execution": false,
                          "target": {
                            "use_workflow_target_group": true
                          }
                        },
                        "object_type": "definition_activity"
                      }
                    ]
                  },
                  {
                    "unique_name": "definition_activity_01UYRIG428OEI1MXeqo8reGJPqLBc0mIKv8",
                    "name": "Condition Branch",
                    "title": "Condition Branch",
                    "type": "logic.condition_block",
                    "base_type": "activity",
                    "properties": {
                      "condition": {
                        "left_operand": "$activity.definition_activity_01UYR7GN8FQDH4bag5kvdmBPHv2M2Za0vMw.output.script_queries.snow_payload$",
                        "operator": "eq",
                        "right_operand": "None"
                      },
                      "continue_on_failure": false,
                      "display_name": "Condition Branch",
                      "skip_execution": false
                    },
                    "object_type": "definition_activity"
                  }
                ]
              },
              {
                "unique_name": "definition_activity_01UVYWGVCIMIL3EWHUYsfGRiV01AC5hVjRp",
                "name": "Set Variables",
                "title": "increment looping counter",
                "type": "core.set_multiple_variables",
                "base_type": "activity",
                "properties": {
                  "continue_on_failure": false,
                  "display_name": "increment looping counter",
                  "skip_execution": false,
                  "variables_to_update": [
                    {
                      "variable_to_update": "$workflow.definition_workflow_01UTEZXXYFH4J4LDJd2hdgcH9O9HTlg6Idq.local.variable_workflow_01UVYPUUWT8IP2SsJlN24XbIqn6vQ9xWzrD$",
                      "variable_value_new": "$workflow.definition_workflow_01UTEZXXYFH4J4LDJd2hdgcH9O9HTlg6Idq.local.variable_workflow_01UVYPUUWT8IP2SsJlN24XbIqn6vQ9xWzrD$+1"
                    }
                  ]
                },
                "object_type": "definition_activity"
              }
            ]
          }
        ]
      }
    ],
    "categories": [
      "category_1BMfMXSnJMyt5Ihqi7rWJr5N8cf"
    ]
  },
  "targets": {
    "definition_target_01RX4ZJ0H92PS4f0BjXYMjakrJE8ZaVLA85": {
      "unique_name": "definition_target_01RX4ZJ0H92PS4f0BjXYMjakrJE8ZaVLA85",
      "name": "CTR_API",
      "title": "CTR API Target",
      "type": "web-service.endpoint",
      "base_type": "target",
      "object_type": "definition_target",
      "properties": {
        "description": "Target used to invoke iroh endpoints",
        "disable_certificate_validation": false,
        "display_name": "CTR_API",
        "host": "visibility.amp.cisco.com",
        "no_runtime_user": true,
        "path": "/iroh",
        "protocol": "https"
      }
    }
  },
  "runtime_users": {
    "definition_runtime_user_01NDTZXG9G7M25msWDVbAjcxdTcYKtdvG8b": {
      "unique_name": "definition_runtime_user_01NDTZXG9G7M25msWDVbAjcxdTcYKtdvG8b",
      "name": "CTR Admin",
      "title": "CTR Admin",
      "type": "runtime_user.web-service_basic_credentials",
      "base_type": "runtime_user",
      "object_type": "definition_runtime_user",
      "properties": {
        "auth_option": "*****",
        "basic_password": "*****",
        "basic_username": "*****",
        "display_name": "CTR Admin"
      }
    }
  },
  "target_groups": {
    "target_group_01UZL3LNE5VGM1WyXpkk9tpXzRqWbJKYrtt": {
      "unique_name": "target_group_01UZL3LNE5VGM1WyXpkk9tpXzRqWbJKYrtt",
      "name": "Snow Target Group",
      "title": "Snow Target Group",
      "description": "Snow Target Group",
      "type": "generic.target_group",
      "base_type": "target_group",
      "version": "1.0.0",
      "targets": [
        {
          "data_target_type": "web-service.endpoint",
          "view_target_type": "web-service.endpoint",
          "include_all_targets": false,
          "criteria": [
            {
              "operator": "mw",
              "left_operand": "$input.display_name$",
              "right_operand": "*Snow*"
            }
          ]
        }
      ],
      "object_type": "target_group"
    }
  }
}